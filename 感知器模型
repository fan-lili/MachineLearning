import numpy as np
import matplotlib.pyplot as plt

def GetData(dataMat):
    X = []
    Y = []
    for i in range(len(dataMat)):
        X.append(dataMat[i][0])
        Y.append(dataMat[i][1])
    X = np.array(X)
    Y = np.array(Y)
    return X,Y
    
class Perceptron():
    '''
    Parameters:
        lr:learning rate
        iter_num:the num of iteration
    ''' 
    def __init__(self,lr=1,iter_num=1000):
        self.lr = lr
        self.iter_num = iter_num
        
    def train_model(self,X,y):
        w = np.zeros(X.shape[1])
        b = 0
        Flag = False
        while(not Flag):
            idx = int(np.random.choice(len(dataMat),1))   # Select a set of data randomly
            x = X[idx]
            y = Y[idx]
            if(y*(np.dot(x,w) + b))<=0:
                w = w + self.lr*y*np.transpose(x)
                b = b + self.lr*y
            else:
                for i in range(len(dataMat)):
                    x = X[i]
                    y = Y[i]
                    if(y*(np.dot(x,w) + b))<=0: 
                        break
                    if i == len(dataMat) - 1:
                        i = len(dataMat) + 10
                if i == len(dataMat) + 10:
                    Flag = True
        return w,b

dataMat = [((3,3),1),((4,3),1),((1,1),-1)]
X,Y = GetData(dataMat)
model = Perceptron()
w,b = model.train_model(X,Y)
fig = plt.figure()
ax = fig.add_subplot(111)
ax.scatter(X[:,0],X[:,1],c=Y,s=80)
if w[1] != 0:
    X1_test = np.linspace(min(X[:,0]),max(X[:,0]),10)
    Y_pred = -(w[0]*X1_test +b)/w[1]
else:
    X1_test = -b/w[0]*np.ones(10)
    Y_pred = np.linspace(min(X[:,1]),max(X[:,0]),10)
ax.plot(X1_test,Y_pred)

# X2_test = np.linspace(min(X[:,1]),max(X[:,1]),50)
# x_mesh,y_mesh = np.meshgrid(X1_test,X2_test)
# X_test = np.stack((x_mesh,y_mesh),axis=1)
# Y_pred = np.where((np.dot(X_test,w)+b) >= 0.0 , 1 , -1)
# ax.scatter(X,Y,c=Y_pred)
