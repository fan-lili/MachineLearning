from numpy import *
import matplotlib.pyplot as plt
from matplotlib.patches import Circle

'''
完整版SMO的核技巧伪代码如下：
创建一个alpha向量,并将其初始化为0向量
当迭代次数小于最大迭代次数时（外循环）
    选择第一个alpha值：一种是在所有数据集上进行单遍扫描，另一种是在非边界alpha中实现单遍扫描
    对数据集中的每个数据向量（内循环）：
        如果该数据向量能被优化：
            随机选择另外一个数据向量，最大化步长选择
            同时优化这两个向量
            如果两个向量都不能被优化，则退出内循环
    如果所有向量都没被优化，增加迭代数目，继续下一次循环
'''
def loadDataSet(filename):
    '''导入数据集'''
    dataMat = []
    labelMat = []
    fr = open(filename)
    for line in fr.readlines():
        lineArr = line.strip().split('\t')
        dataMat.append([float(lineArr[0]), float(lineArr[1])])
        labelMat.append(float(lineArr[2]))
    return dataMat,labelMat

def kernelTrans(X, A, kTup):
    '''
    通过核函数进行特征映射
        X - 数据矩阵
        A - 包含单个样本的向量
        kTup - 核函数信息
    '''
    m,n = shape(X)
    K = mat(zeros((m,1)))
    # 当核函数为线性函数
    if kTup[0] == 'lin':
        K = X * A.T
    elif kTup[0] == 'rbf':
        for j in range(m):
            deltaRow = X[j,:] - A
            K[j] = deltaRow * deltaRow.T
        K = exp(K / (-1*kTup[1]**2))
    else: raise NameError('有问题——————没有给出对应的核函数形式')
    return K

class optStruct:
    '''保存数据结构'''
    def __init__(self, dataMatIn, classLabels, C, toler, kTup):
        self.X = dataMatIn
        self.labelMat = classLabels
        self.C = C
        self.toler = toler
        self.m = shape(dataMatIn)[0]
        self.alphas = mat(zeros((self.m,1)))
        self.b = 0
        # eCache第一列给出的是eCache是否有效的标志位，第二列给出的是实际的数值
        self.eCache = mat(zeros((self.m,2)))
        self.K = mat(zeros((self.m,self.m)))
        # 计算每一行数据的核函数
        for i in range(self.m):
            self.K[:,i] = kernelTrans(self.X, self.X[i,:], kTup)
    
def calcEk(oS, k):
    '''计算预测误差Ek'''
    fXk = float(multiply(oS.alphas, oS.labelMat).T * (oS.K[:,k]) + oS.b)
    Ek = fXk - float(oS.labelMat[k])
    return Ek

def selectJ(i, oS, Ei):
    '''用于选择第二个alpha值'''
    maxK = -1
    maxDeltaE = 0
    Ej = 0
    oS.eCache[i] = [1,Ei]
    # 返回非零元素的索引，为1说明已经计算好了
    validEcacheList = nonzero(oS.eCache[:,0].A)[0]    
    if (len(validEcacheList)) > 1:
        for k in validEcacheList:
            if k == i:
                continue
            Ek = calcEk(oS, k)
            deltaE = abs(Ei - Ek)
            # 选择具有最大步长的k值
            if (deltaE > maxDeltaE):
                maxK = k
                maxDeltaE = deltaE
                Ej = Ek
        return maxK, Ej
    else:
        j = selectJrand(i, oS.m)
        Ej = calcEk(oS, j)
    return j, Ej
    
def selectJrand(i,m):
    '''从m中选择一个不是i的元素'''
    j = i
    while(j==i):
        j = int(random.uniform(0,m))
    return j

def updateEk(oS, k):
    '''计算误差值，并存入缓存中'''
    Ek = calcEk(oS, k)
    oS.eCache[k] = [1,Ek]

def clipAlpha(aj,H,L):
    '''调整alpha在[L,H]之间'''
    if aj > H:
        aj = H
    if aj < L:
        aj = L
    return aj

def innerL(i, oS):
    '''同Simple形式相同'''
    Ei = calcEk(oS, i)
    # 优化alpha
    if ((oS.labelMat[i] * Ei < -oS.toler) and (oS.alphas[i] < oS.C)) or ((oS.labelMat[i] * Ei > oS.toler) and (oS.alphas[i] > 0)):
        # 选择alphaj
        j,Ej = selectJ(i, oS, Ei)
        
        # 保存更新前的aplpha值
        alphaIold = oS.alphas[i].copy()
        alphaJold = oS.alphas[j].copy()
        
        # 计算上下界L和H
        if (oS.labelMat[i] != oS.labelMat[j]):
            L = max(0, oS.alphas[j] - oS.alphas[i])
            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])
        else:
            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)
            H = min(oS.C, oS.alphas[j] + oS.alphas[i])
        if L == H: 
            print("L==H")
            return 0
        
        # 计算eta
        eta = 2.0 * oS.K[i,j] - oS.K[i,i] - oS.K[j,j]
        if eta >= 0: 
            print("eta>=0")
            return 0
        
        # 更新alpha_j
        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej)/eta
        oS.alphas[j] = clipAlpha(oS.alphas[j],H,L)
        
        # 缓存
        updateEk(oS, j)
        
        if (abs(oS.alphas[j] - alphaJold) < 0.00001): 
            print("alpha_j变化太小")
            return 0
        
        # 更新alpha_i
        oS.alphas[i] += oS.labelMat[j]*oS.labelMat[i]*(alphaJold - oS.alphas[j])
        
        # 更新缓存
        updateEk(oS, i)

        #更新b
        b1 = oS.b - Ei- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.K[i,i] - oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.K[i,j]
        b2 = oS.b - Ej- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.K[i,j]- oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.K[j,j]
        if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]): 
            oS.b = b1
        elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]): 
            oS.b = b2
        else: 
            oS.b = (b1 + b2)/2.0
        return 1
    else: 
        return 0
    
def SMO_Platt_Kernel(dataMatIn, classLabels, C, toler, maxIter, kTup):
    '''完整版SMO'''
    oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(), C, toler, kTup)
    iter = 0 
    entireSet = True 
    alphaPairsChanged = 0
    while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):
        alphaPairsChanged = 0
        # 遍历整个数据集
        if entireSet:
            for i in range(oS.m):        
                alphaPairsChanged += innerL(i,oS)
                print("全样本遍历:第%d次迭代 样本:%d, alpha优化次数:%d" % (iter,i,alphaPairsChanged))
            iter += 1
        #遍历非边界值
        else: 
            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]
            for i in nonBoundIs:
                alphaPairsChanged += innerL(i,oS)
                print("非边界遍历:第%d次迭代 样本:%d, alpha优化次数:%d" % (iter,i,alphaPairsChanged))
            iter += 1
        if entireSet:
            entireSet = False
        elif (alphaPairsChanged == 0):
            entireSet = True  
        print("迭代次数: %d" % iter)
        return oS.b,oS.alphas 
    
def calcWs(alphas, dataArr, classLabels):
    '''计算权重'''
    X = mat(dataArr)
    labelMat = mat(classLabels).transpose()
    m,n = shape(X)
    w = zeros((n,1))
    for i in range(m):
        w += multiply(alphas[i]*labelMat[i],X[i,:].T)
    return w
       

TrainDataArr,TrainLabelArr = loadDataSet('SVM_testSetRBF.txt')

k1 = 0.1
b,alphas = SMO_Platt_Kernel(TrainDataArr, TrainLabelArr, 200, 0.0001, 100, ('rbf', k1))

TrainDataMat = mat(TrainDataArr)
TrainLabelMat = mat(TrainLabelArr).transpose()

# 获得支持向量
svInd = nonzero(alphas.A > 0)[0]
sVs = TrainDataMat[svInd]
labelSV = TrainLabelMat[svInd]
print("支持向量个数:%d" % shape(sVs)[0])

# 画出支持向量
fig = plt.figure(1)
ax = fig.add_subplot(111)
ax.scatter(array(TrainDataMat)[:,0], array(TrainDataMat)[:,1],c=array(TrainLabelMat),s=30)
ax.scatter(array(sVs)[:,0],array(sVs)[:,1], c=array(labelSV), edgecolor='red', linewidth=2)

# 训练误差
m,n = shape(TrainDataMat)
errorCount = 0
for i in range(m):
    kernelEval = kernelTrans(sVs,TrainDataMat[i,:],('rbf', k1))
    predict = kernelEval.T * multiply(labelSV,alphas[svInd]) + b 
    if sign(predict) != sign(TrainLabelMat[i]): 
        errorCount += 1
print("训练集错误率: %.2f%%" % ((float(errorCount)/m)*100))

# 测试误差
TestDataArr,TestLabelArr = loadDataSet('SVM_testSetRBF2.txt')
errorCount = 0
TestDataMat = mat(TestDataArr)
TestLabelMat = mat(TestLabelArr).transpose()
m,n = shape(TestDataMat)
for i in range(m):
    kernelEval = kernelTrans(sVs,TestDataMat[i,:],('rbf', k1)) 
    predict=kernelEval.T * multiply(labelSV,alphas[svInd]) + b
    if sign(predict) != sign(TestLabelMat[i]): 
        errorCount += 1
print("测试集错误率: %.2f%%" % ((float(errorCount)/m)*100))
fig = plt.figure(2)
ax = fig.add_subplot(111)
ax.scatter(array(TestDataMat)[:,0],array(TestDataMat)[:,1],c=array(TestLabelMat),s=30)

# 分界图绘制
fig = plt.figure(3)
ax = fig.add_subplot(111)
testDataRandom = random.uniform(-1,1,size=(10000,2))   #随机产生测试数据
testPredict = zeros((shape(testDataRandom)[0],1))
for i in range(shape(testDataRandom)[0]):
    kernelEva1 = kernelTrans(sVs, testDataRandom[i,:], ('rbf',k1))
    testPredict[i] = sign(kernelEva1.T * multiply(labelSV, alphas[svInd]) + b)
ax.scatter(testDataRandom[:,0],testDataRandom[:,1],c=testPredict,alpha=0.6) 
# 
ax.contourf(testDataRandomX,testDataRandomY,testPredict.reshape(testDataRandomX.shape),alpha=0.08,cmap=plt.cm.Spectral) 
ax.contour(testDataRandomX,testDataRandomY,testPredict.reshape(testDataRandomX.shape), levels=[.5], cmap="Greys", vmin=0, vmax=.6)
ax.set_xlim(-1,1.2)
ax.set_ylim(-1,1.2)
