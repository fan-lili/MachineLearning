from numpy import *
import matplotlib.pyplot as plt
from matplotlib.patches import Circle

'''
完整版SMO伪代码如下：
创建一个alpha向量,并将其初始化为0向量
当迭代次数小于最大迭代次数时（外循环）
    选择第一个alpha值：一种是在所有数据集上进行单遍扫描，另一种是在非边界alpha中实现单遍扫描
    对数据集中的每个数据向量（内循环）：
        如果该数据向量能被优化：
            随机选择另外一个数据向量，最大化步长选择
            同时优化这两个向量
            如果两个向量都不能被优化，则退出内循环
    如果所有向量都没被优化，增加迭代数目，继续下一次循环
'''
def loadDataSet(filename):
    '''导入数据集'''
    dataMat = []
    labelMat = []
    fr = open(filename)
    for line in fr.readlines():
        lineArr = line.strip().split('\t')
        dataMat.append([float(lineArr[0]), float(lineArr[1])])
        labelMat.append(float(lineArr[2]))
    return dataMat,labelMat

class optStruct:
    '''保存数据结构'''
    def __init__(self, dataMatIn, classLabels, C, toler):
        self.X = dataMatIn
        self.labelMat = classLabels
        self.C = C
        self.toler = toler
        self.m = shape(dataMatIn)[0]
        self.alphas = mat(zeros((self.m,1)))
        self.b = 0
        # eCache第一列给出的是eCache是否有效的标志位，第二列给出的是实际的数值
        self.eCache = mat(zeros((self.m,2)))
    
def calcEk(oS, k):
    '''计算预测误差Ek'''
    fXk = float(multiply(oS.alphas, oS.labelMat).T * (oS.X * oS.X[k,:].T)) + oS.b
    Ek = fXk - float(oS.labelMat[k])
    return Ek

def selectJ(i, oS, Ei):
    '''用于选择第二个alpha值'''
    maxK = -1
    maxDeltaE = 0
    Ej = 0
    oS.eCache[i] = [1,Ei]
    # 返回非零元素的索引，为1说明已经计算好了
    validEcacheList = nonzero(oS.eCache[:,0].A)[0]    
    if (len(validEcacheList)) > 1:
        for k in validEcacheList:
            if k == i:
                continue
            Ek = calcEk(oS, k)
            deltaE = abs(Ei - Ek)
            # 选择具有最大步长的k值
            if (deltaE > maxDeltaE):
                maxK = k
                maxDeltaE = deltaE
                Ej = Ek
        return maxK, Ej
    else:
        j = selectJrand(i, oS.m)
        Ej = calcEk(oS, j)
    return j, Ej
    
def selectJrand(i,m):
    '''从m中选择一个不是i的元素'''
    j = i
    while(j==i):
        j = int(random.uniform(0,m))
    return j

def updateEk(oS, k):
    '''计算误差值，并存入缓存中'''
    Ek = calcEk(oS, k)
    oS.eCache[k] = [1,Ek]

def clipAlpha(aj,H,L):
    '''调整alpha在[L,H]之间'''
    if aj > H:
        aj = H
    if aj < L:
        aj = L
    return aj

def innerL(i, oS):
    '''同Simple形式相同'''
    Ei = calcEk(oS,i)
    # 如果误差很大且对满足条件的alpha值进行优化
    if ((oS.labelMat[i]*Ei < -oS.toler) and (oS.alphas[i] < oS.C)) or ((oS.labelMat[i]*Ei > oS.toler) and (oS.alphas[i] > 0)):
        # 选择第二个alpha值
        j, Ej = selectJ(i, oS, Ei)
        
        # 保存alphai和alphaj，进行后续的比较
        alphaIold = oS.alphas[i].copy()
        alphaJold = oS.alphas[j].copy()
        
        # 确定待优化alpha值的上下限
        if (oS.labelMat[i] != oS.labelMat[j]):
            L = max(0, oS.alphas[j] - oS.alphas[i])
            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])
        else:
            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)
            H = min(oS.C, oS.alphas[j] + oS.alphas[i])
        # 若上下限相等，不做调整
        if L == H:
            print('L==H')
            return 0
         
        # 计算eta，从而更新alpha值
        eta = 2.0 * oS.X[i,:] * oS.X[j,:].T - oS.X[i,:] * oS.X[i,:].T - oS.X[j,:] * oS.X[j,:].T
        if eta >= 0:
            print('eta>=0')
            return 0

        # 更新alpha值
        oS.alphas[j] -= oS.labelMat[j]*(Ei - Ej)/eta
        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)
        
        # 更新误差缓存
        updateEk(oS, j)
        
        # 若更新量很小
        if (abs(oS.alphas[j] - alphaJold) < 0.00001):
            print('j not moving enough')
            return 0
        
        # 根据约束更新alphaI值
        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])

        # 更新误差缓存
        updateEk(oS, i)
        
        # 计算模型的b值
        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i,:] * oS.X[i,:].T \
                    - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[i,:] * oS.X[j,:].T
        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.X[i,:] * oS.X[j,:].T \
                    - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.X[j,:] * oS.X[j,:].T
        if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]):
            oS.b = b1
        elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]):
            oS.b = b2
        else:
            oS.b = (b1 + b2)/2.0
        return 1
    else:
        return 0
    
def SMO_Platt(dataMatIn, classLabels, C, toler, maxIter):
    '''完整版SMO'''
    oS = optStruct(mat(dataMatIn), mat(classLabels).transpose(),C,toler)
    iter = 0
    entireSet = True
    alphaPairsChanged = 0
    while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):
        alphaPairsChanged = 0
        # 遍历整个数据集
        if entireSet:
            for i in range(oS.m):
                alphaPairsChanged += innerL(i,oS)
                print("全样本遍历:第%d次迭代 样本:%d, alpha优化次数:%d" % (iter,i,alphaPairsChanged))
            iter += 1
        # 寻找非边界上的点
        else:
            nonBoundIs = nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]
            for i in nonBoundIs:
                alphaPairsChanged += innerL(i,oS)
                print("非边界遍历:第%d次迭代 样本:%d, alpha优化次数:%d" % (iter,i,alphaPairsChanged))
            iter += 1
        if entireSet:
            entireSet = False
        elif (alphaPairsChanged == 0):
            entireSet = True
        print('iteration number:{}'.format(iter))
    return oS.b, oS.alphas

def calcWs(alphas, dataArr, classLabels):
    '''计算权重'''
    X = mat(dataArr)
    labelMat = mat(classLabels).transpose()
    m,n = shape(X)
    w = zeros((n,1))
    for i in range(m):
        w += multiply(alphas[i]*labelMat[i],X[i,:].T)
    return w

dataMat,labelMat = loadDataSet('./SVM_testSet.txt')
b,alphas = SMO_Platt(dataMat, labelMat, 0.6, 0.001, 40)
w = calcWs(alphas, dataMat, labelMat)

# 只有对应的0<alpha<C，该点才是支持向量
SupportIdx = where(alphas>0)[0]

dataMat = array(dataMat)
labelMat = array(labelMat)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.scatter(dataMat[:,0], dataMat[:,1], c=labelMat, s=30)

for i in range(len(SupportIdx)):
    Idx = SupportIdx[i]
    cir = Circle((dataMat[Idx,0],dataMat[Idx,1]), radius=0.3, fill=False, color='red')
    ax.add_patch(cir)
    
xx = linspace(min(dataMat[:,0])-0.5,max(dataMat[:,0])+1,50)
yy = -(w[0]*xx + b)/w[1]
ax.set_xlim(min(xx[:]),max(xx[:]))
ax.set_ylim(-6,5)
ax.plot(xx[:,newaxis],yy.T)
